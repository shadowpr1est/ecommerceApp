"""
Django settings for ecommerce project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-7ca+o3pdyywns8f64-i@ly5*l*mqgp+1$=g4=doh7nbxlb(v^r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []
AWS_S3_USE_SSL = False
AWS_S3_SECURE_URLS = False
AWS_S3_URL_PROTOCOL = "http:"
AWS_S3_ENDPOINT_URL= "http://minio:9000"
AWS_S3_CUSTOM_DOMAIN = "localhost:9000/my-bucket"
AWS_ACCESS_KEY_ID = "minioadmin"
AWS_SECRET_ACCESS_KEY = "minioadmin"
AWS_STORAGE_BUCKET_NAME = "my-bucket"
AWS_S3_FILE_OVERWRITE = True
AWS_S3_ADDRESSING_STYLE = "path"
# Application definition

INSTALLED_APPS = [
    'magnum_admin.apps.MagnumAdminConfig',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'products',
    'storages',
    'django_extensions',
    'rest_framework',
    'silk'
]

STORAGES = {
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "access_key": os.getenv("AWS_ACCESS_KEY_ID", "minioadmin"),
            "secret_key": os.getenv("AWS_SECRET_ACCESS_KEY", "minioadmin"),
            "bucket_name": os.getenv("AWS_STORAGE_BUCKET_NAME", "my-bucket"),
            "endpoint_url": os.getenv("AWS_S3_ENDPOINT_URL", "http://minio:9000"),
            "region_name": "us-east-1",
            "addressing_style": "path",
        },
    },
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'silk.middleware.SilkyMiddleware'
]

ROOT_URLCONF = 'ecommerce.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecommerce.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

#
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.getenv('POSTGRES_DB', 'bookr_db'),
#         'USER': os.getenv('POSTGRES_USER', 'bookr'),
#         'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'bookr'),
#         'HOST': 'db',
#         'PORT': '5432',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
#
# MEDIA_URL = "/media/"

MEDIA_ROOT = BASE_DIR / "media"

MEDIA_URL = f"http://{os.getenv('AWS_S3_CUSTOM_DOMAIN', 'localhost:9000/my-bucket')}/"

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [BASE_DIR / "static"]


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
"""
The correct structure:
    WebApp-
            .venv
            ecommerce
            media
            products-
                    migrations-
                    templates-
                    __init__.py
                    admin.py
                    apps.py
                    models.py
                    tests.py
                    urls.py
                    views.py
            static-
                    styles.html
            templates
                    base.html
            db.sqlite3
            manage.py
"""
